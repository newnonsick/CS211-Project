@startuml
class cs211.project.controllers.EventInformationController {
- Label eventNameLabel
- ImageView eventImageView
- Label eventInfoLabel
- Label placeLabel
- Label startDateLabel
- Label endDateLabel
- Label maxParticipantsLabel
- Label startJoinDateLabel
- Label closingJoinDateLabel
- Label categoryLabel
- Label errorLabel
- Datasource<EventList> datasource
- EventList eventList
- Event event
- String eventUUID
- String[] componentData
- String currentUsername
+ void initialize()
+ void handleBackToEventPage()
- void joinEventButton()
- void goToParticipantActivity()
+ void handleVisitTeamButton()
}
class cs211.project.controllers.AdminPageController {
- TableView usersLogTableView
- Label usernameLabel
- Label nameLabel
- Datasource<UserList> datasource
- UserList usersLogList
- boolean changePasswordOn
- ImageView profileImageView
~ Label errorLabel
~ Label usernameTagLabel
~ Label nameTagLabel
~ Pane changePasswordPane
~ PasswordField oldPasswordField
~ PasswordField newPasswordField
~ CheckBox cautionChoiceBox
~ Button changePasswordButton
+ void initialize()
- void showTable(UserList)
+ void changePasswordPaneToggle()
+ void changePassword()
+ void agreeToCaution()
}
class cs211.project.controllers.MyEventsController {
- TableView<Event> myEventsTableView
- EventList eventList
- Datasource<EventList> datasource
- User currentUser
- JoinEventFileDataSource joinEventDataSource
+ void initialize()
- void showTable(EventList)
}
class cs211.project.controllers.TeamParticipantElementController {
- Datasource<TeamParticipantList> teamParticipantListDatasource
- TeamParticipantList teamParticipantList
- TeamParticipant teamParticipant
- Datasource<TeamList> teamListDatasource
- TeamList teamList
- Team team
- Datasource<UserList> userListDatasource
- UserList userList
- User user
- String currentUsername
~ ImageView profileImageView
~ ImageView leaderImageView
~ Button removeParticipantButton
~ Button setLeaderButton
~ Label nameLabel
+ void initialize()
+ void setTeamParticipant(String,String,String,String)
+ void handleRemoveParticipantButton()
+ void handleSetLeaderButton()
}
class cs211.project.controllers.TeamManagementController {
~ TextField activityNameTextField
~ TextArea activityDescriptionTextArea
~ ScrollPane participantListScrollPane
~ GridPane participantListGridPane
~ TableView activityTableView
~ Button addActivityButton
~ Button deleteActivityButton
~ Button endActivityButton
~ TableColumn activityNameColumn
~ TableColumn activityDescriptionColumn
~ TableColumn activityStatusColumn
- ActivityList activityList
- Datasource<ActivityList> activityListDatasource
- Activity selectedActivity
- Datasource<TeamList> teamListDatasource
- TeamList teamList
- Team team
- Datasource<TeamParticipantList> teamParticipantListDatasource
- TeamParticipantList teamParticipantList
- String[] componentData
- String currentUsername
- String eventUUID
- String teamName
+ void initialize()
+ void handleEndActivityButton()
+ void handleAddActivityButton()
+ void handleRemoveActivityButton()
+ void showActivity(ActivityList)
+ void showParticipant()
}
class cs211.project.controllers.CreateTeamController {
~ DatePicker startDateDatePicker
~ DatePicker endDateDatePicker
~ TextField teamNameTextField
~ TextField numPeopleTextField
~ MenuButton startHourMenuButton
~ MenuButton startMinuteMenuButton
~ MenuButton endHourMenuButton
~ MenuButton endMinuteMenuButton
- TeamList teamList
- Datasource<TeamList> datasource
- String eventUUID
- String currentUsername
- Datasource<EventList> eventListDatasource
- EventList eventList
- Event event
+ void initialize()
+ void createTeam()
- void showAlert(String,String)
+ void setEventUUID(String)
+ void setCurrentUsername(String)
}
class cs211.project.controllers.MainPageController {
~ BorderPane window
~ StackPane content
~ Button eventButton
~ Button createEventButton
~ Button myEventButton
~ Button myTeamButton
~ Button userInfoButton
~ ImageView eventNavBarImage
~ ImageView createEventNavBarImage
~ ImageView myEventsNavBarImage
~ ImageView myTeamsNavBarImage
~ ImageView userInfoNavBarImage
~ Label nameLabel
~ ImageView userImageView
- User currentUser
- ImageView currentNavBarImage
+ void initialize()
+ {static} void configRoute()
+ void goToEventList()
+ void goToCreateEvent()
+ void goToMyEvents()
+ void goToUserInformation()
+ void handleMyTeamButton()
+ void changeStyleClassButton(Button)
+ void mouseIn(ImageView)
+ void mouseOut(ImageView)
+ void logout()
- void changeCurrentNavBarImage(ImageView)
}
class cs211.project.controllers.TeamOfEventListController {
~ ScrollPane teamScrollPane
~ GridPane teamGridPane
~ Label eventNameLabel
- Datasource<TeamList> teamListDatasource
- Datasource<TeamParticipantList> teamParticipantListDatasource
- TeamList teamList
- TeamParticipantList teamParticipantList
- String eventUUID
- String[] componentData
- String currentUsername
- LocalDate currentDate
- Event event
- Datasource<EventList> eventListDatasource
- EventList eventList
+ void initialize()
+ void showTeam()
}
class cs211.project.controllers.EventTeamManagementContrller {
~ GridPane teamListGridPane
~ ScrollPane teamListScrollPane
~ Label eventNameLabel
- String eventUUID
- Datasource<TeamList> datasourceTeam
- LocalDate currentDate
- TeamList teamList
- String[] componentData
- String currentUsername
- CreateTeamController createTeamController
- Datasource<EventList> datasourceEvent
- EventList eventList
- Event event
+ void initialize()
+ void handleCreateTeamButton()
+ void showTeamList()
}
class cs211.project.controllers.InstructionsController {
- Label instructionLabel
+ void initialize()
- void goToLogin()
}
class cs211.project.controllers.ResetPasswordController {
~ PasswordField oldPasswordTextField
~ PasswordField newPasswordTextField
~ PasswordField confirmPasswordTextField
~ Label errorLabel
- User currentUser
- Datasource<UserList> userListDataSource
- UserList userList
+ void initialize()
+ void saveChange()
+ void cancelChange()
}
class cs211.project.controllers.LoginController {
~ TextField usernameTextField
~ PasswordField passwordTextField
~ Label errorLabel
~ Button loginButton
+ void initialize()
+ void login()
- void goToRegister()
- void goToCreators()
- void goToInstructions()
}
class cs211.project.controllers.EventParticipantManagementController {
- TableView eventParticipantTableView
- TableView activityParticipantTableView
- Button removeActivityButton
- Button startTimePicker
- Button endTimePicker
- Label eventNameLabel
- Label eventName2Label
- TextField activityNameTextField
- TextArea activityInfoTextArea
- DatePicker activityDatePicker
- LocalTime selectedStartTime
- LocalTime selectedEndTime
- ActivityList activityList
- Datasource<ActivityList> activityListDatasource
- Activity selectedActivity
- EventList eventList
- Event event
- Datasource<EventList> eventListDatasource
- String[] componentData
- String currentUsername
- String eventOfParticipantUUID
- Datasource<List<String[]>> participantDataSource
- List<String[]> participantList
- Datasource<UserList> userListDatasource
- UserList userList
+ void initialize()
+ void handleBackToEventManagementButton()
+ void handleStartTimePickerButton()
+ void handleEndTimePickerButton()
- LocalTime showCustomTimePickerDialog()
+ void handleAddActivityPartiButton()
+ void handleRemoveActivityPartiButton()
- void removeParticipant(String[])
+ void showParticipants(List<String[]>)
+ void showActivity(ActivityList)
}
class cs211.project.controllers.UserInformationController {
- Label usernameLabel
- Label nameLabel
- TableView<Event> activeEventTableView
- TableView<Event> eventHistoryTableView
- ImageView profileImageView
- Button changeProfileButton
- Button cancelButton
- User currentUser
- Datasource<EventList> eventListDatasource
- EventList eventList
- Event event
- Datasource<UserList> userListDataSource
- UserList userList
- Datasource<List<String[]>> joinEventDataSource
- List<String[]> joinEventData
~ File selectedImage
+ void initialize()
- void checkFileIsExisted(String)
- void showUser()
- void showActiveTable(EventList)
- void showHistoryTable(EventList)
+ void changeProfile()
+ void chooseFile()
- void cancelChangeProfilePic()
- void resetPassword()
}
class cs211.project.controllers.MyTeamListController {
~ ScrollPane teamListScrollPane
~ GridPane teamListGridPane
~ ScrollPane yourCreateTeamListScrollPane
~ GridPane yourCreateTeamListGridPane
- User currentUser
- Datasource<TeamList> datasourceTeam
- Datasource<TeamParticipantList> datasourceParticipant
- LocalDate currentDate
- TeamList teamList
- TeamParticipantList teamParticipantList
+ void initialize()
+ void showTeamList()
}
class cs211.project.controllers.TeamElementController {
~ Label eventNameLabel
~ Label teamNameLabel
~ Label maxParticipantsLabel
~ Label remaindaysLabel
~ AnchorPane selectTeamAnchorPane
~ ImageView eventImageView
~ Label participantsLabel
- Datasource<EventList> eventListDatasource
- EventList eventList
- Event event
- Datasource<TeamParticipantList> teamParticipantListDatasource
- TeamParticipantList teamParticipantList
+ void initialize()
+ void setPage(String,String,int,LocalDate,LocalTime,LocalDate,LocalTime)
}
class cs211.project.controllers.TeamCommunicationController {
~ Label activityNameLabel
~ Label teamNameLabel
~ TableView activityTableView
~ TextField sendMessageTextField
~ Button manageTeamButton
~ VBox chatBoxVBox
~ ScrollPane chatBoxScrollPane
~ Button sendMessageButton
~ TableColumn activityNameColumn
~ TableColumn activityDescriptionColumn
~ TableColumn activityStatusColumn
~ Text activityDescriptionText
- TeamChatList teamChatList
- Team team
- Datasource<TeamList> teamListDatasource
- TeamList teamList
- Datasource<TeamChatList> teamChatListDatasource
- Datasource<ActivityList> activityListDatasource
- ActivityList activityList
- String beforeSend
- String lastTimeUpdate
- String[] componentData
- String eventUUID
- String teamName
- String currentUsername
- Datasource<UserList> userListDatasource
- UserList userList
- Datasource<EventList> eventListDatasource
- EventList eventList
- Activity selectedActivity
+ void initialize()
+ void handleSendMessageButton()
+ void handleManageTeamButton()
+ void showChat()
+ void update(String,String,LocalDateTime)
+ void showActivity(ActivityList)
}
class cs211.project.controllers.CreateEventController {
- User currentUser
- TextField eventNameTextField
- TextArea eventInfoTextArea
- TextField placeTextField
- DatePicker startDatePicker
- DatePicker endDatePicker
- Button startTimePicker
- Button endTimePicker
- Label errorLabel
- Label eventImageErrorLabel
- ImageView eventImageView
- Button uploadImageButton
- ChoiceBox<String> eventChoiceBox
- LocalTime selectedStartTime
- LocalTime selectedEndTime
~ File selectedImage
- Datasource<EventList> datasource
- Event event
- EventList eventList
- String[] eventCategories
+ void initialize()
- void createEvent()
- void goToMyEvents()
+ void uploadImage()
+ void chooseFile()
+ void handleStartTimePickerButton()
+ void handleEndTimePickerButton()
- LocalTime showCustomTimePickerDialog()
}
class cs211.project.controllers.CreatorsController {
- ImageView tarnImageView
- ImageView newImageView
- ImageView nuttImageView
- ImageView iceImageView
+ void initialize()
- void goToLogin()
}
class cs211.project.controllers.EventManagementController {
- TextField eventNameTextField
- TextArea eventInfoTextArea
- ChoiceBox<String> eventChoiceBox
- TextField placeTextField
- DatePicker startDatePicker
- DatePicker endDatePicker
- TextField maxParticipantTextField
- DatePicker startJoinDatePicker
- DatePicker closingJoinDatePicker
- ImageView eventImageView
- Label errorLabel
- Button startTimeEditButton
- Button endTimeEditButton
- Button startJoinTimeButton
- Button closeJoinTimeButton
- Button clearJoinTimesButton
- LocalTime editedStartTime
- LocalTime editedEndTime
- LocalTime editedStartJoinTime
- LocalTime editedCloseJoinTime
- LocalTime oldStartJoinTime
- LocalTime oldCloseJoinTime
- Datasource<EventList> eventListDatasource
- JoinEventFileDataSource joinEventDatasource
- ParticipantActivityListFileDatasource participantActivityListDatasource
- Event event
- EventList eventList
- String[] eventCategories
- String eventUUID
- String[] componentData
- String currentUsername
- String oldEventName
- LocalTime oldStartTime
- LocalTime oldEndTime
- ActivityList activityList
+ void initialize()
+ void showInformation()
+ void uploadImage()
+ void saveEventEditButton()
+ void handleStartTimeButton()
+ void handleEndTimeButton()
+ void handleStartJoinTimeButton()
+ void handleCloseJoinTimeButton()
+ void handleClearJoinTimesButton()
- void checkJoinTimesClearButton()
- LocalTime showCustomTimePickerDialog()
+ void eventPartiManagementButton()
+ void backToYourCreatedEvents()
+ void handleManageTeamButton()
}
class cs211.project.controllers.ParticipantActivityController {
~ Label eventNameLabel
~ TableView<Activity> activityParticipantTableView
- Label eventDateLabel
- Label eventTimeLabel
- Label eventInfoLabel
- Label placeLabel
- Event event
~ EventList eventList
- String eventUUID
- String currentUsername
- String sourcePage
- ParticipantActivityListFileDatasource datasource
- EventListFileDatasource eventListFileDatasource
+ void initialize()
+ void showActivities(ActivityList)
+ void backToEventInformation()
}
class cs211.project.controllers.EventListController {
- String[] eventList
- int maxRow
- Datasource<EventList> datasource
- EventList eventListData
- LocalDate currentDate
- boolean isSearch
- String selectedCategory
- User currentUser
~ Pane categoryPane
~ TextField searchTextField
~ Button searchButton
~ GridPane eventGrid
~ ScrollPane eventScrollPane
~ Button allCategoryButton
~ Button categoryExpoButton
~ Button categoryFestivalButton
~ Button categorySeminarButton
~ Button categoryHouseButton
~ Button categoryFoodButton
~ Button categoryEntertainmentButton
~ Button categoryConcertButton
~ Button categoryTravelButton
~ Button categoryArtButton
~ Button categorySportButton
~ Button categoryReligionButton
~ Button categoryPetButton
~ Button categoryEducationButton
~ Button categoryOtherButton
~ Button categoryOpenButton
~ boolean categoryOn
+ void initialize()
+ void handleSearchButton()
- void handleAutoComplete(KeyEvent)
+ void showList()
+ void showList(String)
+ void categoryPaneOpen()
+ void handleAllCategoryButton()
+ void handleCategoryExpoButton()
+ void handleCategoryFestivalButton()
+ void handleCategorySeminarButton()
+ void handleCategoryHouseButton()
+ void handleCategoryFoodButton()
+ void handleCategoryEntertainmentButton()
+ void handleCategoryConcertButton()
+ void handleCategoryTravelButton()
+ void handleCategoryArtButton()
+ void handleCategorySportButton()
+ void handleCategoryReligionButton()
+ void handleCategoryPetButton()
+ void handleCategoryEducationButton()
+ void handleCategoryOtherButton()
+ void changeStyleClassCategoryButton(Button)
}
class cs211.project.controllers.EventElementController {
~ Label eventNameLabel
~ ImageView eventImageView
~ Label categoryLabel
+ void setPage(String,String,String)
}
class cs211.project.controllers.RegisterController {
~ TextField usernameTextField
~ PasswordField passwordTextField
~ PasswordField confirmPasswordTextField
~ TextField nameTextField
~ Label errorLabel
~ Button upLoadImageButton
~ ImageView profileImageView
~ Button cancelUploadButton
~ File selectedImage
~ boolean upFile
+ void initialize()
- void signUp()
- void goToLogin()
+ void upLoadImage()
- void choosePhotoFile()
- void cancelUpload()
}
@enduml